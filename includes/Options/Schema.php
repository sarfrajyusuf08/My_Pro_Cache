<?php

namespace MyProCache\Options;

use function __;
use function sprintf;
use function strip_tags;

class Schema{    public static function pages(): array    {        $pages = array(            'dashboard'    => self::dashboard_page(),            'presets'     => self::presets_page(),            'cache'        => self::cache_page(),            'ttl'          => self::ttl_page(),            'purge'        => self::purge_page(),            'excludes'     => self::excludes_page(),            'optimize'     => self::optimize_page(),            'media'        => self::media_page(),            'cdn'          => self::cdn_page(),            'object_cache' => self::object_cache_page(),            'preload'      => self::preload_page(),            'database'     => self::database_page(),            'toolbox'      => self::toolbox_page(),            'debug'        => self::debug_page(),            'general'      => self::general_page(),            'import_export'=> self::import_export_page(),            'help'         => self::help_page(),        );        return self::ensure_tooltips( $pages );    }    public static function field_definitions(): array    {        $fields = array();        foreach ( self::pages() as $page ) {            if ( empty( $page['sections'] ) || ! is_array( $page['sections'] ) ) {                continue;            }            foreach ( $page['sections'] as $section ) {                if ( empty( $section['fields'] ) || ! is_array( $section['fields'] ) ) {                    continue;                }                foreach ( $section['fields'] as $key => $field ) {                    $fields[ $key ] = $field;                }            }        }        return $fields;    }    private static function ensure_tooltips( array $pages ): array    {        foreach ( $pages as &$page ) {            if ( empty( $page['sections'] ) || ! is_array( $page['sections'] ) ) {                continue;            }            foreach ( $page['sections'] as &$section ) {                if ( empty( $section['fields'] ) || ! is_array( $section['fields'] ) ) {                    continue;                }                foreach ( $section['fields'] as &$field ) {                    if ( empty( $field['tooltip'] ) ) {                        if ( ! empty( $field['description'] ) ) {                            $field['tooltip'] = strip_tags( $field['description'] );                        } elseif ( ! empty( $field['label'] ) ) {                            $field['tooltip'] = sprintf( __( 'Configure %s.', 'my-pro-cache' ), strip_tags( $field['label'] ) );                        } else {                            $field['tooltip'] = __( 'Adjust this option.', 'my-pro-cache' );                        }                    }                }            }        }        unset( $field, $section, $page );        return $pages;    }    private static function dashboard_page(): array    {        return array(            'menu_title'  => __( 'Dashboard', 'my-pro-cache' ),            'page_title'  => __( 'My Pro Cache ? Dashboard', 'my-pro-cache' ),            'description' => __( 'Overview of cache health, quick actions, and recent activity.', 'my-pro-cache' ),            'icon'        => 'dashicons-dashboard',            'show_save'   => false,            'sections'    => array(),        );    }    private static function presets_page(): array    {        return array(            'menu_title'  => __( 'Presets', 'my-pro-cache' ),            'page_title'  => __( 'Performance Presets', 'my-pro-cache' ),            'description' => __( 'Pick an optimisation profile to configure caching, optimisation, and CDN settings in one click.', 'my-pro-cache' ),            'show_save'   => false,            'sections'    => array(),        );    }        private static function cache_page(): array    {        return array(            'menu_title'  => __( 'Cache', 'my-pro-cache' ),            'page_title'  => __( 'Full Page Cache', 'my-pro-cache' ),            'description' => __( 'Configure the primary cache behavior and storage backends.', 'my-pro-cache' ),            'sections'    => array(                'cache_backend' => array(                    'title'       => __( 'Storage Backend', 'my-pro-cache' ),                    'description' => __( 'Select where cached pages are stored and how logged-in users are handled.', 'my-pro-cache' ),                    'fields'      => array(                        'cache_backend' => array(                            'label'   => __( 'Backend', 'my-pro-cache' ),                            'type'    => 'select',                            'options' => array(                                'disk'      => __( 'Disk (WP_CONTENT/cache)', 'my-pro-cache' ),                                'redis'     => __( 'Redis', 'my-pro-cache' ),                                'memcached' => __( 'Memcached', 'my-pro-cache' ),                            ),                            'tooltip' => __( 'Choose the storage engine for cached pages. Offload to Redis or Memcached for distributed environments.', 'my-pro-cache' ),                        ),                        'cache_logged_in_mode' => array(                            'label'   => __( 'Logged-in Users', 'my-pro-cache' ),                            'type'    => 'select',                            'options' => array(                                'bypass'  => __( 'Bypass cache', 'my-pro-cache' ),                                'private' => __( 'Serve private cache', 'my-pro-cache' ),                            ),                            'tooltip' => __( 'Choose whether logged-in sessions bypass caching entirely or receive a user-specific private cache.', 'my-pro-cache' ),                        ),                        'cache_rest_api' => array(                            'label'   => __( 'Cache REST API Responses', 'my-pro-cache' ),                            'type'    => 'checkbox',                            'tooltip' => __( 'Cache read-only REST API GET requests. Useful for headless front-ends.', 'my-pro-cache' ),                        ),                    ),                ),                'cache_vary' => array(                    'title'       => __( 'Cache Variation (Vary)', 'my-pro-cache' ),                    'description' => __( 'Control how the cache varies by device, role, language, or selected cookies.', 'my-pro-cache' ),                    'fields'      => array(                        'cache_vary_device' => array(                            'label'   => __( 'Vary by Device', 'my-pro-cache' ),                            'type'    => 'checkbox',                            'tooltip' => __( 'Create separate cache entries for desktop vs. mobile visitors.', 'my-pro-cache' ),                        ),                        'cache_vary_role' => array(                            'label'   => __( 'Vary by User Role', 'my-pro-cache' ),                            'type'    => 'checkbox',                            'tooltip' => __( 'Generate cache variants depending on the visitor\'s WordPress role.', 'my-pro-cache' ),                        ),                        'cache_vary_lang' => array(                            'label'   => __( 'Vary by Language', 'my-pro-cache' ),                            'type'    => 'checkbox',                            'tooltip' => __( 'Separate cache entries for multilingual sites (WPML, Polylang, etc.).', 'my-pro-cache' ),                        ),                        'cache_vary_cookie_allowlist' => array(                            'label'       => __( 'Cookie Allowlist', 'my-pro-cache' ),                            'type'        => 'textarea',                            'placeholder' => __( "example_cookiewp-wpml_current_language", 'my-pro-cache' ),                            'tooltip'     => __( 'Only the listed cookie names will influence the cache vary hash. One per line.', 'my-pro-cache' ),                        ),                    ),                ),            ),        );    }    private static function ttl_page(): array    {        return array(            'menu_title'  => __( 'TTL', 'my-pro-cache' ),            'page_title'  => __( 'Cache TTL', 'my-pro-cache' ),            'description' => __( 'Control how long cached content stays fresh before regeneration.', 'my-pro-cache' ),            'sections'    => array(                'ttl_values' => array(                    'title'       => __( 'Time To Live', 'my-pro-cache' ),                    'description' => __( 'Define cache lifetime per context and stale handling.', 'my-pro-cache' ),                    'fields'      => array(                        'ttl_default' => array(                            'label'   => __( 'Default TTL (seconds)', 'my-pro-cache' ),                            'type'    => 'number',                            'min'     => 60,                            'step'    => 60,                            'tooltip' => __( 'Base lifetime for cached pages when no more specific rule applies.', 'my-pro-cache' ),                        ),                        'ttl_front_page' => array(                            'label'   => __( 'Front Page TTL (seconds)', 'my-pro-cache' ),                            'type'    => 'number',                            'min'     => 60,                            'step'    => 60,                            'tooltip' => __( 'Shorter TTL keeps the home page updated more frequently.', 'my-pro-cache' ),                        ),                        'ttl_feed' => array(                            'label'   => __( 'Feed TTL (seconds)', 'my-pro-cache' ),                            'type'    => 'number',                            'min'     => 60,                            'step'    => 60,                            'tooltip' => __( 'Lifetime for RSS/Atom/JSON feeds.', 'my-pro-cache' ),                        ),                        'stale_while_revalidate' => array(                            'label'   => __( 'Stale-While-Revalidate (seconds)', 'my-pro-cache' ),                            'type'    => 'number',                            'min'     => 0,                            'tooltip' => __( 'Serve slightly stale content while fetching a fresh copy in the background.', 'my-pro-cache' ),                        ),                        'stale_if_error' => array(                            'label'   => __( 'Stale-If-Error (seconds)', 'my-pro-cache' ),                            'type'    => 'number',                            'min'     => 0,                            'tooltip' => __( 'Continue serving cache when the origin encounters errors (500, timeout).', 'my-pro-cache' ),                        ),                    ),                ),            ),        );    }    private static function purge_page(): array    {        return array(            'menu_title'  => __( 'Purge', 'my-pro-cache' ),            'page_title'  => __( 'Cache Purge Rules', 'my-pro-cache' ),            'description' => __( 'Configure automatic and manual cache purges.', 'my-pro-cache' ),            'sections'    => array(                'purge_auto' => array(                    'title'       => __( 'Automatic Purge Triggers', 'my-pro-cache' ),                    'description' => __( 'Clear related cache entries when content updates occur.', 'my-pro-cache' ),                    'fields'      => array(                        'purge_on_update' => array(                            'label'   => __( 'Post/Page Updates', 'my-pro-cache' ),                            'type'    => 'checkbox',                            'tooltip' => __( 'Purge cache when posts, terms, menus, or attachments are updated.', 'my-pro-cache' ),                        ),                        'purge_on_comment' => array(                            'label'   => __( 'New Comments', 'my-pro-cache' ),                            'type'    => 'checkbox',                            'tooltip' => __( 'Purge cache for commented posts when new comments are approved.', 'my-pro-cache' ),                        ),                        'purge_ccu_cdn' => array(                            'label'   => __( 'Purge Connected CDN', 'my-pro-cache' ),                            'type'    => 'checkbox',                            'tooltip' => __( 'Trigger CDN cache purge alongside local cache clears.', 'my-pro-cache' ),                        ),                    ),                ),                'purge_schedule' => array(                    'title'       => __( 'Scheduled Purge', 'my-pro-cache' ),                    'description' => __( 'Define recurring purge patterns handled by WP-Cron.', 'my-pro-cache' ),                    'fields'      => array(                        'purge_schedule_enabled' => array(                            'label'   => __( 'Enable Scheduled Purge', 'my-pro-cache' ),                            'type'    => 'checkbox',                            'tooltip' => __( 'Run automated purge tasks for selected URLs or patterns.', 'my-pro-cache' ),                        ),                        'purge_schedule_patterns' => array(                            'label'       => __( 'URL Patterns', 'my-pro-cache' ),                            'type'        => 'textarea',                            'tooltip'     => __( 'One URL or wildcard per line to purge on schedule.', 'my-pro-cache' ),                        ),                    ),                ),            ),        );    }    private static function excludes_page(): array    {        return array(            'menu_title'  => __( 'Excludes', 'my-pro-cache' ),            'page_title'  => __( 'Cache Exclusions', 'my-pro-cache' ),            'description' => __( 'Exclude pages, cookies, or user agents from caching.', 'my-pro-cache' ),            'sections'    => array(                'exclude_rules' => array(                    'title'       => __( 'Exclude Rules', 'my-pro-cache' ),                    'description' => __( 'Regex and wildcard patterns to bypass caching.', 'my-pro-cache' ),                    'fields'      => array(                        'exclude_urls' => array(                            'label'       => __( 'URL Patterns', 'my-pro-cache' ),                            'type'        => 'textarea',                            'tooltip'     => __( 'Paths or regex patterns. One per line.', 'my-pro-cache' ),                        ),                        'exclude_cookies' => array(                            'label'   => __( 'Cookie Names', 'my-pro-cache' ),                            'type'    => 'textarea',                            'tooltip' => __( 'Cookie names that bypass cache when present.', 'my-pro-cache' ),                        ),                        'exclude_user_agents' => array(                            'label'   => __( 'User Agents', 'my-pro-cache' ),                            'type'    => 'textarea',                            'tooltip' => __( 'Browser or crawler identifiers to skip caching.', 'my-pro-cache' ),                        ),                        'exclude_query_args' => array(                            'label'   => __( 'Query Arguments', 'my-pro-cache' ),                            'type'    => 'textarea',                            'tooltip' => __( 'Query string keys that mark a request as non-cacheable.', 'my-pro-cache' ),                        ),                    ),                ),            ),        );    }    private static function optimize_page(): array    {        return array(            'menu_title'  => __( 'Optimize', 'my-pro-cache' ),            'page_title'  => __( 'CSS/JS/HTML Optimization', 'my-pro-cache' ),            'description' => __( 'Minify, combine, and control delivery of assets.', 'my-pro-cache' ),            'sections'    => array(                'minify' => array(                    'title'       => __( 'Minification', 'my-pro-cache' ),                    'description' => __( 'Reduce asset size by stripping whitespace and comments.', 'my-pro-cache' ),                    'fields'      => array(                        'min_html' => array(                            'label'   => __( 'Minify HTML', 'my-pro-cache' ),                            'type'    => 'checkbox',                        ),                        'min_css' => array(                            'label'   => __( 'Minify CSS', 'my-pro-cache' ),                            'type'    => 'checkbox',                        ),                        'min_js' => array(                            'label'   => __( 'Minify JavaScript', 'my-pro-cache' ),                            'type'    => 'checkbox',                        ),                    ),                ),                'combine' => array(                    'title'       => __( 'Combination & Delivery', 'my-pro-cache' ),                    'description' => __( 'Merge assets to reduce HTTP requests and adjust loading strategy.', 'my-pro-cache' ),                    'fields'      => array(                        'combine_css' => array(                            'label'   => __( 'Combine CSS', 'my-pro-cache' ),                            'type'    => 'checkbox',                        ),                        'combine_js' => array(                            'label'   => __( 'Combine JavaScript', 'my-pro-cache' ),                            'type'    => 'checkbox',                        ),                        'exclude_css_handles' => array(                            'label'   => __( 'Exclude CSS Handles', 'my-pro-cache' ),                            'type'    => 'textarea',                        ),                        'exclude_js_handles' => array(                            'label'   => __( 'Exclude Script Handles', 'my-pro-cache' ),                            'type'    => 'textarea',                        ),                        'critical_css_auto' => array(                            'label'   => __( 'Generate Critical CSS', 'my-pro-cache' ),                            'type'    => 'checkbox',                        ),                        'critical_css_per_post_type' => array(                            'label'   => __( 'Critical CSS per Post Type', 'my-pro-cache' ),                            'type'    => 'checkbox',                        ),                        'css_async' => array(                            'label'   => __( 'Load CSS Asynchronously', 'my-pro-cache' ),                            'type'    => 'checkbox',                        ),                        'js_defer' => array(                            'label'   => __( 'Defer JavaScript', 'my-pro-cache' ),                            'type'    => 'checkbox',                        ),                        'js_delay_until_interaction' => array(                            'label'   => __( 'Delay JS Until Interaction', 'my-pro-cache' ),                            'type'    => 'checkbox',                        ),                        'js_delay_allowlist' => array(                            'label'   => __( 'Delay Allowlist', 'my-pro-cache' ),                            'type'    => 'textarea',                        ),                        'preload_keys' => array(                            'label'   => __( 'Preload Resources', 'my-pro-cache' ),                            'type'    => 'textarea',                        ),                        'dns_prefetch' => array(                            'label'   => __( 'DNS Prefetch', 'my-pro-cache' ),                            'type'    => 'textarea',                        ),                        'preconnect' => array(                            'label'   => __( 'Preconnect', 'my-pro-cache' ),                            'type'    => 'textarea',                        ),                    ),                ),            ),        );    }    private static function media_page(): array    {        return array(            'menu_title'  => __( 'Media', 'my-pro-cache' ),            'page_title'  => __( 'Media Optimization', 'my-pro-cache' ),            'description' => __( 'Optimize images, iframes, and media delivery.', 'my-pro-cache' ),            'sections'    => array(                'media_lazy' => array(                    'title'       => __( 'Lazy Load', 'my-pro-cache' ),                    'description' => __( 'Defer offscreen images and iframes until they enter the viewport.', 'my-pro-cache' ),                    'fields'      => array(                        'lazyload_images' => array(                            'label' => __( 'Lazy Load Images', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'lazyload_iframes' => array(                            'label' => __( 'Lazy Load Iframes', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'lqip_placeholders' => array(                            'label' => __( 'Low Quality Placeholders', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                    ),                ),                'media_formats' => array(                    'title'       => __( 'Next-Gen Formats', 'my-pro-cache' ),                    'description' => __( 'Convert and serve WebP/AVIF versions when browsers support them.', 'my-pro-cache' ),                    'fields'      => array(                        'convert_webp' => array(                            'label' => __( 'Generate WebP', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'convert_avif' => array(                            'label' => __( 'Generate AVIF', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'webp_avif_rewrite' => array(                            'label' => __( 'Rewrite to WebP/AVIF', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'media_excludes' => array(                            'label' => __( 'Exclude Selectors/URLs', 'my-pro-cache' ),                            'type'  => 'textarea',                        ),                    ),                ),            ),        );    }    private static function cdn_page(): array    {        return array(            'menu_title'  => __( 'CDN', 'my-pro-cache' ),            'page_title'  => __( 'Content Delivery Network', 'my-pro-cache' ),            'description' => __( 'Rewrite asset URLs to a CDN and integrate with Cloudflare.', 'my-pro-cache' ),            'sections'    => array(                'cdn_pull' => array(                    'title'       => __( 'CDN Mapping', 'my-pro-cache' ),                    'description' => __( 'Rewrite static asset URLs to your CDN hostnames.', 'my-pro-cache' ),                    'fields'      => array(                        'cdn_enabled' => array(                            'label' => __( 'Enable CDN Rewrite', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'cdn_host' => array(                            'label'       => __( 'Primary CDN Host', 'my-pro-cache' ),                            'type'        => 'text',                            'placeholder' => 'https://cdn.example.com',                        ),                        'cdn_image_host' => array(                            'label' => __( 'Image CDN Host', 'my-pro-cache' ),                            'type'  => 'text',                        ),                        'cdn_static_host' => array(                            'label' => __( 'CSS/JS CDN Host', 'my-pro-cache' ),                            'type'  => 'text',                        ),                        'cdn_file_types' => array(                            'label' => __( 'File Type Allowlist', 'my-pro-cache' ),                            'type'  => 'textarea',                        ),                    ),                ),                'cdn_cloudflare' => array(                    'title'       => __( 'Cloudflare Integration', 'my-pro-cache' ),                    'description' => __( 'Purge Cloudflare cache and manage zones via API.', 'my-pro-cache' ),                    'fields'      => array(                        'cf_enabled' => array(                            'label' => __( 'Enable Cloudflare API', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'cf_api_token' => array(                            'label' => __( 'API Token', 'my-pro-cache' ),                            'type'  => 'password',                        ),                        'cf_zone_id' => array(                            'label' => __( 'Zone ID', 'my-pro-cache' ),                            'type'  => 'text',                        ),                    ),                ),            ),        );    }    private static function object_cache_page(): array    {        return array(            'menu_title'  => __( 'Object Cache', 'my-pro-cache' ),            'page_title'  => __( 'Persistent Object Cache', 'my-pro-cache' ),            'description' => __( 'Configure Redis or Memcached for WordPress object caching.', 'my-pro-cache' ),            'sections'    => array(                'oc_settings' => array(                    'title'       => __( 'Connection', 'my-pro-cache' ),                    'description' => __( 'Connection details for object cache services.', 'my-pro-cache' ),                    'fields'      => array(                        'oc_enabled' => array(                            'label' => __( 'Enable Object Cache', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'oc_backend' => array(                            'label'   => __( 'Backend', 'my-pro-cache' ),                            'type'    => 'select',                            'options' => array(                                'redis'     => __( 'Redis', 'my-pro-cache' ),                                'memcached' => __( 'Memcached', 'my-pro-cache' ),                            ),                        ),                        'oc_host' => array(                            'label' => __( 'Host', 'my-pro-cache' ),                            'type'  => 'text',                        ),                        'oc_port' => array(                            'label' => __( 'Port', 'my-pro-cache' ),                            'type'  => 'number',                            'min'   => 1,                        ),                        'oc_auth' => array(                            'label' => __( 'Password', 'my-pro-cache' ),                            'type'  => 'password',                        ),                        'oc_persistent_groups' => array(                            'label' => __( 'Persistent Groups', 'my-pro-cache' ),                            'type'  => 'textarea',                        ),                        'oc_compression' => array(                            'label' => __( 'Enable Compression', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                    ),                ),            ),        );    }    private static function preload_page(): array    {        return array(            'menu_title'  => __( 'Preload / Crawler', 'my-pro-cache' ),            'page_title'  => __( 'Preload & Warmup', 'my-pro-cache' ),            'description' => __( 'Configure the sitemap-driven crawler that keeps cache warm.', 'my-pro-cache' ),            'sections'    => array(                'preload_core' => array(                    'title'       => __( 'Preload Settings', 'my-pro-cache' ),                    'description' => __( 'Enable the crawler and tune concurrency/interval.', 'my-pro-cache' ),                    'fields'      => array(                        'preload_enabled' => array(                            'label' => __( 'Enable Preload', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'preload_sitemaps' => array(                            'label' => __( 'Sitemaps', 'my-pro-cache' ),                            'type'  => 'textarea',                        ),                        'preload_concurrency' => array(                            'label' => __( 'Concurrent Requests', 'my-pro-cache' ),                            'type'  => 'number',                            'min'   => 1,                            'step'  => 1,                        ),                        'preload_interval_sec' => array(                            'label' => __( 'Interval (seconds)', 'my-pro-cache' ),                            'type'  => 'number',                            'min'   => 1,                        ),                        'preload_user_agent' => array(                            'label' => __( 'User Agent', 'my-pro-cache' ),                            'type'  => 'text',                        ),                    ),                ),            ),        );    }    private static function database_page(): array    {        return array(            'menu_title'  => __( 'Database', 'my-pro-cache' ),            'page_title'  => __( 'Database Optimizer', 'my-pro-cache' ),            'description' => __( 'Clean up transient and temporary data.', 'my-pro-cache' ),            'sections'    => array(                'db_cleanup' => array(                    'title'       => __( 'Clean-Up Jobs', 'my-pro-cache' ),                    'description' => __( 'Select which database items to tidy up.', 'my-pro-cache' ),                    'fields'      => array(                        'database_cleanup_revisions' => array(                            'label' => __( 'Post Revisions', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'database_cleanup_autodrafts' => array(                            'label' => __( 'Auto Drafts', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'database_cleanup_trash_posts' => array(                            'label' => __( 'Trashed Posts/Pages', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'database_cleanup_spam' => array(                            'label' => __( 'Spam/Trash Comments', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'database_cleanup_transients' => array(                            'label' => __( 'Expired Transients', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'database_cleanup_sessions' => array(                            'label' => __( 'Sessions', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'database_optimize_tables' => array(                            'label' => __( 'Optimize Tables', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                    ),                ),            ),        );    }    private static function toolbox_page(): array    {        return array(            'menu_title'  => __( 'Toolbox', 'my-pro-cache' ),            'page_title'  => __( 'Toolbox', 'my-pro-cache' ),            'description' => __( 'Utilities for exporting settings, safe mode, and server rules.', 'my-pro-cache' ),            'sections'    => array(                'toolbox_general' => array(                    'title'       => __( 'Utilities', 'my-pro-cache' ),                    'description' => __( 'Administrative helpers and safe-mode toggles.', 'my-pro-cache' ),                    'fields'      => array(                        'toolbox_safe_mode' => array(                            'label' => __( 'Enable Safe Mode', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'toolbox_server_snippet' => array(                            'label'   => __( 'Server Snippet Target', 'my-pro-cache' ),                            'type'    => 'select',                            'options' => array(                                'apache'    => __( 'Apache / LiteSpeed (.htaccess)', 'my-pro-cache' ),                                'nginx'     => __( 'Nginx', 'my-pro-cache' ),                                'litespeed' => __( 'LiteSpeed', 'my-pro-cache' ),                            ),                        ),                        'toolbox_generated_snippet' => array(                            'label'    => __( 'Generated Snippet', 'my-pro-cache' ),                            'type'     => 'textarea',                            'readonly' => true,                        ),                    ),                ),            ),        );    }    private static function debug_page(): array    {        return array(            'menu_title'  => __( 'Debug / Reports', 'my-pro-cache' ),            'page_title'  => __( 'Debug & Reports', 'my-pro-cache' ),            'description' => __( 'Inspect cache headers, logs, and diagnostic checks.', 'my-pro-cache' ),            'sections'    => array(                'debug_settings' => array(                    'title'       => __( 'Debugging', 'my-pro-cache' ),                    'description' => __( 'Enable verbose logging and collect diagnostic data.', 'my-pro-cache' ),                    'fields'      => array(                        'debug_enabled' => array(                            'label' => __( 'Enable Debug Mode', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'debug_log_limit' => array(                            'label' => __( 'Log Size Limit', 'my-pro-cache' ),                            'type'  => 'number',                            'min'   => 10,                        ),                    ),                ),            ),        );    }    private static function general_page(): array    {        return array(            'menu_title'  => __( 'General', 'my-pro-cache' ),            'page_title'  => __( 'General Settings', 'my-pro-cache' ),            'description' => __( 'Toggle modules, control heartbeat, and accessibility features.', 'my-pro-cache' ),            'sections'    => array(                'general_modules' => array(                    'title'       => __( 'Modules', 'my-pro-cache' ),                    'description' => __( 'Enable or disable feature modules globally.', 'my-pro-cache' ),                    'fields'      => array(                        'general_module_cache' => array(                            'label' => __( 'Cache Module', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'general_module_optimize' => array(                            'label' => __( 'Optimize Module', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'general_module_media' => array(                            'label' => __( 'Media Module', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'general_module_cdn' => array(                            'label' => __( 'CDN Module', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'general_module_object_cache' => array(                            'label' => __( 'Object Cache Module', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'general_module_preload' => array(                            'label' => __( 'Preload Module', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'general_module_database' => array(                            'label' => __( 'Database Module', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'general_module_toolbox' => array(                            'label' => __( 'Toolbox Module', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'general_module_debug' => array(                            'label' => __( 'Debug Module', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                    ),                ),                'general_heartbeat' => array(                    'title'       => __( 'Heartbeat Control', 'my-pro-cache' ),                    'description' => __( 'Adjust WordPress Heartbeat API intervals.', 'my-pro-cache' ),                    'fields'      => array(                        'heartbeat_control_admin' => array(                            'label' => __( 'Limit Admin Heartbeat', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'heartbeat_control_admin_freq' => array(                            'label' => __( 'Admin Frequency (seconds)', 'my-pro-cache' ),                            'type'  => 'number',                            'min'   => 15,                        ),                        'heartbeat_control_frontend' => array(                            'label' => __( 'Limit Frontend Heartbeat', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'heartbeat_control_front_freq' => array(                            'label' => __( 'Frontend Frequency (seconds)', 'my-pro-cache' ),                            'type'  => 'number',                            'min'   => 15,                        ),                        'heartbeat_control_post' => array(                            'label' => __( 'Limit Post Editor Heartbeat', 'my-pro-cache' ),                            'type'  => 'checkbox',                        ),                        'heartbeat_control_post_freq' => array(                            'label' => __( 'Post Editor Frequency (seconds)', 'my-pro-cache' ),                            'type'  => 'number',                            'min'   => 15,                        ),                    ),                ),            ),        );    }    private static function import_export_page(): array    {        return array(            'menu_title'  => __( 'Import / Export', 'my-pro-cache' ),            'page_title'  => __( 'Import & Export Settings', 'my-pro-cache' ),            'description' => __( 'Backup or restore plugin configuration.', 'my-pro-cache' ),            'sections'    => array(                'import_export_settings' => array(                    'title'       => __( 'Settings Portability', 'my-pro-cache' ),                    'description' => __( 'Export configuration as JSON or import from a file.', 'my-pro-cache' ),                    'fields'      => array(                        'import_export_last' => array(                            'label'    => __( 'Last Action', 'my-pro-cache' ),                            'type'     => 'text',                            'readonly' => true,                        ),                    ),                ),            ),        );    }    private static function help_page(): array    {        return array(            'menu_title'  => __( 'Help', 'my-pro-cache' ),            'page_title'  => __( 'Help & Support', 'my-pro-cache' ),            'description' => __( 'Documentation links, FAQs, and system report.', 'my-pro-cache' ),            'show_save'   => false,            'sections'    => array(),        );    }}